/* This class represents a Database context, as defined by Entity Framework Core, which is a framework used by ASP.NET core to 
    set up, communicate with, and manage a database. This class sets up the scheme for database that is to be generated and used by the 
    ProjectManager web application. It determines what tables with what columns and what relationships will be created in the database.
    Furthermore, a context object represents a particular context in a database such that it enables transactions.
*/

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using ProjectManager.Models;

namespace ProjectManager.Data
{
    //Database context that accesses all the database tables in the application 
    //inherits from the IdentityDbContext class, which both allows management of the database using Entity Framework Core 
    //and the simultaneous management of user accounts, handled by ASP.NET Core Identity
    public class ProjectManagerContext : IdentityDbContext<AppUser>
    {
        /**/
        /*
        * NAME:
        *      ProjectManagerContext() - The constructor for the ProjectManager 
        * SYNOPSIS:
        *      ProjectManagerContext(DbContextOptions<ProjectManagerContext> options)
                    options --> the options to configure the database context
        * DESCRIPTION:
        *      Initializes the ProjectManagerContext class and sends the options up to the base class for initialization of the base class
        * RETURNS
        * AUTHOR
        *      Biplab Thapa Magar
        * DATE
        *      08/29/2020 
        * /
        /**/
        public ProjectManagerContext (DbContextOptions<ProjectManagerContext> options) : base(options)
        { 

        }

        /**/
        /*
        * NAME:
        *      OnModelCreating - Function to configure the database tables, their columns, and their relationships
        * SYNOPSIS:
        *      OnModelCreating(ModelBuilder modelBuilder)
                    modelBuilder --> the ModelBuilder object used to configure each entity when the database is generated by EF Core
        * DESCRIPTION:
        *      This function is used to configure the database scheme, including table relationships, attributes, and so on.
        * RETURNS
        * AUTHOR
        *      Biplab Thapa Magar
        * DATE
        *      09/02/2020 
        * /
        /**/
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //assign key to project table
            modelBuilder.Entity<Project>()
                .HasKey(p => p.ProjectId);
            
            //auto-increment id attribute
            modelBuilder.Entity<Project>()
                .Property(p => p.ProjectId)
                .ValueGeneratedOnAdd();
            
            //assign key to ProjectUser table
            modelBuilder.Entity<ProjectUser>()
                .HasKey(pu => new {pu.ProjectId, pu.AppUserId});

            //assign key to Task table
            modelBuilder.Entity<Task>()
                .HasKey(t => new {t.TaskId});

            //assign default TaskStatus value in Task table
            modelBuilder.Entity<Task>()
                .Property(t => t.TaskStatus)
                .HasDefaultValue("Open");
            
            //auto-increment id attribute
            modelBuilder.Entity<Task>()
                .Property(t => t.TaskId)
                .ValueGeneratedOnAdd();

            //set key for TaskUpdate table
            modelBuilder.Entity<TaskUpdate>()
                .HasKey(tu => new {tu.TaskUpdateId});  
                
            //auto-increment id attribute
            modelBuilder.Entity<TaskUpdate>()
                .Property(tu => tu.TaskUpdateId)
                .ValueGeneratedOnAdd();

                
            //set key for TaskType table
            modelBuilder.Entity<TaskType>()
                .HasKey(tt => new {tt.TaskTypeId});

            //auto-increment id attribute
            modelBuilder.Entity<TaskType>()
                .Property(tt => tt.TaskTypeId)
                .ValueGeneratedOnAdd();

            //set key for TaskUser table
            modelBuilder.Entity<TaskUser>()
                .HasKey(tus => new {tus.TaskId, tus.AppUserId});

            //set key for TaskUserUpdate table
            modelBuilder.Entity<TaskUserUpdate>()
                .HasKey(tuu => new {tuu.TaskUserUpdateId});

            //auto-increment id attribute
            modelBuilder.Entity<TaskUserUpdate>()
                .Property(tuu => tuu.TaskUserUpdateId)
                .ValueGeneratedOnAdd();

            //set key for ProjectInvitation table
            modelBuilder.Entity<ProjectInvitation>()
                .HasKey(pu => pu.ProjectInvitationId);

            //auto-increment id attribute
            modelBuilder.Entity<ProjectInvitation>()
                .Property(pu => pu.ProjectInvitationId)
                .ValueGeneratedOnAdd();

            //set key for TaskComment table
            modelBuilder.Entity<TaskComment>()
                .HasKey(pu => pu.TaskCommentId);

            //auto-increment id attribute
            modelBuilder.Entity<TaskComment>()
                .Property(pu => pu.TaskCommentId)
                .ValueGeneratedOnAdd();

            //change name of AppUser's primary key from Id to AppUserId


            base.OnModelCreating(modelBuilder);
        } 

        //these member variables represent each table in the database created by EF Core
        public DbSet<Project> Projects { get; set; }
        public DbSet<ProjectUser> ProjectUsers {get; set;}
        public DbSet<Task> Tasks {get; set;}
        public DbSet<TaskUpdate> TaskUpdates {get; set;}
        public DbSet<TaskType> TaskTypes {get; set;}
        public DbSet<TaskUser> TaskUsers {get; set;}
        public DbSet<TaskUserUpdate> TaskUserUpdates {get; set;}
        public DbSet<AppUser> AppUsers {get; set;}
        public DbSet<ProjectInvitation> ProjectInvitations {get; set;}
        public DbSet<TaskComment> TaskComments {get; set;}

    }
}